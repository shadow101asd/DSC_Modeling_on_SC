function [D_bottleneck, output] = bottleneckshortestpath_GUROBI(A)
%BOTTLENECKSHORTESTPATH using Gurobi. It is assumed that the source and
%target nodes are the last two indices of the adjacency matrix.

Nsats = size(A, 1) - 2;
s = Nsats + 1; % Source idx
t = Nsats + 2; % Target idx
N = t;

% zeroes represent a lack of connections
% A(A == 0) = inf; % Is this inefficient/necessary?

% Construct Optimization Problem

% Init. variables

% 2D Integer Matrix reprensenting whether edge between nodes (i,j) is
% selected in the BSP
X_ij = optimvar('X_ij', [N, N], Type='integer', LowerBound=0, UpperBound=1); 

dmax = optimvar('dmax', Type='continuous', LowerBound=0, UpperBound=inf);

% Init. optimization problem
optim_problem = optimproblem('ObjectiveSense','min');

% Define objective function
optim_problem.Objective = dmax;

% Define constraints

% dmax coupling constraints

for i = 1:N
    for j = 1:N
        if A(i,j) ~= 0
            optim_problem.Constraints.(['cons_DMAX_',num2str(i),',',num2str(j)) = A(i,j) * X_ij(i,j) <= dmax;
        end
    end
end

% Flow conservation

optim_problem.Constraints.cons_target = sum(X_ij(:,t), 1) - sum(X_ij(t,:), 2) ==  1;
optim_problem.Constraints.cons_source = sum(X_ij(:,s), 1) - sum(X_ij(s,:), 2) == -1;

for k = 1:Nsats
    optim_problem.Constraints.(['cons_', num2str(k)]) = sum(X_ij(:,k), 1) - sum(X_ij(k,:), 2) == 0;
end

% Solve
% Set up paths: This needs to be fixed to run on SC or elsehwere than this Mac
gurobi_file_path = horzcat('/Library/gurobi1201/macos_universal2', '/matlab/gurobi_setup.m');
gurobi_add_path = horzcat('/Library/gurobi1201/macos_universal2', '/examples/matlab/');

% Setup gurobi
run(gurobi_file_path)
addpath(gurobi_add_path); % temporarily overwrites MATLAB's 'intlinprog.m'

[~, D_bottleneck, ~, output] = solve(optim_problem);
    
end

